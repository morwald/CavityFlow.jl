var documenterSearchIndex = {"docs":
[{"location":"#FourSidedCavityFlow.jl-Documentation","page":"Home","title":"FourSidedCavityFlow.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = FourSidedCavityFlow\nDocTestSetup = quote\n    using FourSidedCavityFlow \nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"The four-sided cavity flow is a two-dimensional flow problem. It is an extension of the simple one-sided lid-driven case, where all lids move with the same velocity profile and parallel lids move in opposite directions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<center><img src=\"./assets/foursidedcavity.png\"></center>","category":"page"},{"location":"","page":"Home","title":"Home","text":"partial_t Delta Psi = frac1mathrmRe Delta^2 Psi\n  + (partial_x Psi) partial_y(Delta Psi)\n  - (partial_y Psi) partial_x(Delta Psi)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This Julia module explores a regularized version of the four-sided lid-driven cavity for incompressible fluids to be used as a validator benchmark for Navier-Stokes solvers. The regularization overcomes the corner singularities which are due to the discontinuous boundary conditions. The considered method recovers exponential convergence with a pseudo-spectral Chebyshev discretization scheme. Below the regularization function is shown.  ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This module is not a registered package. To install the FourSidedCavityFlow.jl,  run the following commands in your shell.","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/morwald/FourSidedCavityFlow.jl.git\ncd FourSidedCavityFlow.jl\njulia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inside the Julia REPL open the built-in package manager Pkg by pressing ] and then run.","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg>activate .\npkg>instantiate","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will activate the package and download the necessary dependencies.","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To set up the problem, instantiate the struct p, called CavityStruct, with a Chebyshev polynomial of order n and a Reynolds number Re. This generates a grid of size (n+1)times(n+1), and all the parameters and cache variables needed to run the simulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using FourSidedCavityFlow \nconst CF = FourSidedCavityFlow\n\nn = 64\nRe = 1\np = CF.setup_struct(n, Re);","category":"page"},{"location":"#Symmetric-and-asymmetric-solutions","page":"Home","title":"Symmetric and asymmetric solutions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We can run the steadystate function for a given Reynolds number Re to converge to a steady-state solution with the Newton's method. For example the symmetric base solution for a Reynolds of Re = 50 can be computed by taking a uniformly random initial guess.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Re_start = 100\np.params.Re = Re_start\nΨ0 = 1e-3 * randn((n + 1), (n + 1))\n\nΨ = CF.steadystate(Ψ0, p);","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can visualize the results in the physical domain by transposing the Ψ matrix and mirror the solution at the y axis. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Plots\n\nplt = contourf(\n    reverse(p.params.nodes),\n    reverse(p.params.nodes),\n    Ψ';\n    xlim = (-1, 1),\n    ylim = (-1, 1),\n    aspect_ratio = 1,\n    axis = ([], false),\n    legend = false,\n    color = :davos);","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"./assets/psi_Re50.png\">","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [FourSidedCavityFlow]","category":"page"},{"location":"#FourSidedCavityFlow.diff_chebyshev-Tuple{Int64}","page":"Home","title":"FourSidedCavityFlow.diff_chebyshev","text":"diff_chebyshev(n)\n\nCompute the Chebyshev differentiation matrix with n+1 points in the [1, -1]. Returns a vector of nodes and the matrices for the first, second and fourth derivatives.\n\n\n\n\n\n","category":"method"}]
}
